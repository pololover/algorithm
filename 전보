import heapq
INF = int(1e9)
n,m,start = map(int, input().split())
graph = [[] for _ in range(n+1)]
distance = [INF]*(n+1)
for i in range(m):
  x,y,z = map(int, input().split())
  graph[x].append((y,z))

def dijkstra(start):
  q = []
  heapq.heappush(q, (0,start))
  distance[start] = 0
  while q:
    dist, new = heapq.heappop(q)
    if dist > distance[new]:
      continue
    for i in graph[new]:
      cost = dist + i[1]
      if cost < distance[i[0]]:
        distance[i[0]] = cost
        heapq.heappush(q, (cost, i[0]))

dijkstra(start)
count = 0
max_time = 0
for i in range(1,n):
  if distance[i]==INF:
    continue
  else:
    count+=1
    max_time = max(max_time, distance[i])

print(count, max_time)


두번째 풀이

import heapq
INF = int(1e9)
n,m,c = map(int, input().split())
graph = [[] for _ in range(n+1)]
distance = [INF]*(n+1)
visited = [False]*(n+1)
for i in range(m):
  x,y,z = map(int,input().split())
  graph[x].append((y,z))

def dijkstra(start):
  distance[start] = 0
  q = []
  heapq.heappush(q,(0,start))
  while q:
    dist, now = heapq.heappop(q)
    if dist > distance[now]:
      continue
    for i in graph[now]:
      cost = dist + i[1]
      if cost < distance[i[0]]:
        distance[i[0]] = cost
        heapq.heappush(q, (cost, i[0]))
  count = 0
  max_score = 0
  for d in distance:
    if d!=INF:
      count += 1
      max_score = max(max_score, d)

  print(count-1, max_score)


dijkstra(c)

    
